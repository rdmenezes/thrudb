/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.thrudb.thrudoc;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ListResponse implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ListResponse");
  private static final TField ENTITY_FIELD_DESC = new TField("entity", TType.STRUCT, (short)1);
  private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)2);

  public Entity entity;
  public static final int ENTITY = 1;
  public ThrudocException ex;
  public static final int EX = 2;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(ENTITY, new FieldMetaData("entity", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Entity.class)));
    put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRUCT)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ListResponse.class, metaDataMap);
  }

  public ListResponse() {
  }

  public ListResponse(
    Entity entity,
    ThrudocException ex)
  {
    this();
    this.entity = entity;
    this.ex = ex;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListResponse(ListResponse other) {
    if (other.isSetEntity()) {
      this.entity = new Entity(other.entity);
    }
    if (other.isSetEx()) {
      this.ex = new ThrudocException(other.ex);
    }
  }

  @Override
  public ListResponse clone() {
    return new ListResponse(this);
  }

  public Entity getEntity() {
    return this.entity;
  }

  public void setEntity(Entity entity) {
    this.entity = entity;
  }

  public void unsetEntity() {
    this.entity = null;
  }

  // Returns true if field entity is set (has been asigned a value) and false otherwise
  public boolean isSetEntity() {
    return this.entity != null;
  }

  public void setEntityIsSet(boolean value) {
    if (!value) {
      this.entity = null;
    }
  }

  public ThrudocException getEx() {
    return this.ex;
  }

  public void setEx(ThrudocException ex) {
    this.ex = ex;
  }

  public void unsetEx() {
    this.ex = null;
  }

  // Returns true if field ex is set (has been asigned a value) and false otherwise
  public boolean isSetEx() {
    return this.ex != null;
  }

  public void setExIsSet(boolean value) {
    if (!value) {
      this.ex = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ENTITY:
      if (value == null) {
        unsetEntity();
      } else {
        setEntity((Entity)value);
      }
      break;

    case EX:
      if (value == null) {
        unsetEx();
      } else {
        setEx((ThrudocException)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ENTITY:
      return getEntity();

    case EX:
      return getEx();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ENTITY:
      return isSetEntity();
    case EX:
      return isSetEx();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListResponse)
      return this.equals((ListResponse)that);
    return false;
  }

  public boolean equals(ListResponse that) {
    if (that == null)
      return false;

    boolean this_present_entity = true && this.isSetEntity();
    boolean that_present_entity = true && that.isSetEntity();
    if (this_present_entity || that_present_entity) {
      if (!(this_present_entity && that_present_entity))
        return false;
      if (!this.entity.equals(that.entity))
        return false;
    }

    boolean this_present_ex = true && this.isSetEx();
    boolean that_present_ex = true && that.isSetEx();
    if (this_present_ex || that_present_ex) {
      if (!(this_present_ex && that_present_ex))
        return false;
      if (!this.ex.equals(that.ex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ENTITY:
          if (field.type == TType.STRUCT) {
            this.entity = new Entity();
            this.entity.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EX:
          if (field.type == TType.STRUCT) {
            this.ex = new ThrudocException();
            this.ex.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.entity != null) {
      oprot.writeFieldBegin(ENTITY_FIELD_DESC);
      this.entity.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.ex != null) {
      oprot.writeFieldBegin(EX_FIELD_DESC);
      this.ex.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListResponse(");
    boolean first = true;

    sb.append("entity:");
    if (this.entity == null) {
      sb.append("null");
    } else {
      sb.append(this.entity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ex:");
    if (this.ex == null) {
      sb.append("null");
    } else {
      sb.append(this.ex);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

